# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ['Run NPM scripts']
    types:
      - completed
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  IAM_ROLE: arn:aws:iam::358674439294:role/GithubNeuledgeWebsite
  ECR_REPOSITORY: neuledge/docs
  ECR_TAG: prod
  ECS_SERVICE: neuledge-docs-prod
  ECS_CLUSTER: neuledge-website
  ECS_TASK_DEFINITION: .aws/task-definition.json
  ECS_CONTAINER_NAME: docs
  ASSET_CDN: https://docs-cdn.neuledge.com
  NEXT_PUBLIC_SEGMENT_WRITE_KEY: QojEDoX9vJMHyuHf4JoW3s07skT1XbTE

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - # Add support for more platforms with QEMU (required for x86_64 runners)
      #   # https://github.com/docker/setup-qemu-action
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "ASSET_CDN=${{ env.ASSET_CDN }}"
            "NEXT_PUBLIC_SEGMENT_WRITE_KEY=${{ env.NEXT_PUBLIC_SEGMENT_WRITE_KEY }}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_TAG }}
          environment-variables: |
            ASSET_CDN=${{ env.ASSET_CDN }}
            NEXT_PUBLIC_SEGMENT_WRITE_KEY=${{ env.NEXT_PUBLIC_SEGMENT_WRITE_KEY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 5
